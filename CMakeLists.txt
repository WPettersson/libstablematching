CMAKE_MINIMUM_REQUIRED (VERSION 3.4)
PROJECT (libstablematching)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules/")
CMAKE_POLICY(SET CMP0074 NEW)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wshadow")

FIND_PACKAGE(Threads REQUIRED)
IF(CMAKE_COMPILER_IS_GNUCXX)
  # FindThreads picks up -lpthread but not -pthread
  SET(CMAKE_CXX_FLAGS "-pthread ${CMAKE_CXX_FLAGS}")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

OPTION(CODE_COVERAGE "Enable coverage reporting" OFF)

FIND_PACKAGE(PkgConfig REQUIRED)
PKG_CHECK_MODULES(OSI REQUIRED osi-sym)
SET(LIBRARIES "${OSI_LIBRARIES}")
INCLUDE_DIRECTORIES(SYSTEM ${OSI_INCLUDE_DIRS})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)

ADD_LIBRARY(coverage_config INTERFACE)
if(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
  # Add required flags (GCC & LLVM/Clang)
  TARGET_COMPILE_OPTIONS(coverage_config INTERFACE
    -O0        # no optimization
    -g         # generate debug info
    --coverage # sets all required flags
  )
  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
    TARGET_LINK_OPTIONS(coverage_config INTERFACE --coverage)
  else()
    TARGET_LINK_LIBRARIES(coverage_config INTERFACE --coverage)
  endif()
endif(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")

ADD_SUBDIRECTORY(src)

IF(TESTSUITE)
  ENABLE_TESTING()
  INCLUDE(CTest)
  INCLUDE(Catch)
  ADD_SUBDIRECTORY(test)
ENDIF(TESTSUITE)
